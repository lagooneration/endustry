// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole       @default(USER)
  accounts      Account[]
  // Add relations to other models
  customers     Customer[]
  invoices      Invoice[]
  weightTickets WeightTicket[]
  device        Device[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Customer {
  id            String         @id @default(cuid())
  name          String
  email         String
  phone         String
  address       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  invoices      Invoice[]
  weightTickets WeightTicket[]
}

model Invoice {
  id            String         @id @default(cuid())
  number        String        @unique
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id])
  date          DateTime
  dueDate       DateTime
  total         Float
  status        String        @default("draft")
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // Add user relation
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  items         InvoiceItem[]
  weightTickets WeightTicket[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  description String
  quantity    Float
  unitPrice   Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WeightTicket {
  id           String   @id @default(cuid())
  ticketNumber String   @unique
  invoiceId    String?  // Make this optional since not all tickets need invoices initially
  invoice      Invoice? @relation(fields: [invoiceId], references: [id])
  customerId   String   // Add this field
  customer     Customer @relation(fields: [customerId], references: [id])
  date         DateTime
  truckNumber  String
  driverName   String
  grossWeight  Float
  tareWeight   Float
  netWeight    Float
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id])
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  CANCELLED
  OVERDUE
}

enum WeightTicketStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}


model Device {
  id                String   @id @default(cuid())
  name              String
  entityType        String
  entityId          String
  status            String   @default("offline")
  lastConnected     DateTime?
  lastTelemetry     Json?    // Store the latest telemetry data
  keys              String?
  useStrictDataTypes Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, entityId])
}